title: "Named Entity Recognition (WikiNER)"
description: "Simple example of downloading and converting source data and training a named entity recognition model. The example uses the WikiNER corpus, which was constructed semi-automatically. The main advantage of this corpus is that it's freely available, so the data can be downloaded as a project asset. The WikiNER corpus is distributed in IOB format, a fairly common text encoding for sequence data. The `corpus` subcommand splits the corpus into training, development and testing partitions, and uses `spacy convert` to convert them into spaCy's binary format. You can then edit the config to try out different settings, and trigger training with the `train` subcommand."

# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  config: "default-bilstm"
  # if the url does not work, replace it with the new url of hr500k.conll.zip from:
  # https://www.clarin.si/repository/xmlui/handle/11356/1183
  hr500k-url: 'https://www.clarin.si/repository/xmlui/bitstream/handle/11356/1183/hr500k.conll.zip?sequence=6&isAllowed=y'
  hr500k-archive: 'hr500k.conll.zip'
  hr500k-file: 'hr500k.conll/hr500k.conll' # location within the archive
  gpu: -1

remotes:
  default: gs://galaxy-state/spacy-v3-benchmarks

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "training", "configs", "metrics", "corpus"]

assets:
  - dest: 'assets/${vars.hr500k-archive}'
    url: '${vars.hr500k-url}'

workflows:
  all:
    - corpus
    - train
    - evaluate

commands:
  -
    name: init-config
    help: "Generate a default English NER config"
    script:
      - "python -m spacy init config --lang en --pipeline ner --optimize efficiency -C configs/${vars.config}.cfg"

  - name: corpus
    help: 'Extract the corpus file and create train/test/dev in spacy format'
    deps:
      - 'assets/${vars.hr500k-archive}'
    outputs:
      - 'corpus/train.spacy'
      - 'corpus/dev.spacy'
      - 'corpus/test.spacy'
    script:
      - "./unzip-corpus.sh assets/${vars.hr500k-archive} ${vars.hr500k-file} assets/hr500k.conll"
      - "python scripts/prepare_hr500k.py assets/hr500k.conll corpus"
      - "rm assets/hr500k.conll"

  - name: train
    help: "Train the full pipeline"
    script:
      - "python -m spacy train configs/${vars.config}.cfg -o training/ --gpu-id ${vars.gpu} --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy -c ./scripts/factory_methods.py"
    deps:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
      - "configs/${vars.config}.cfg"
    outputs:
      - "training/model-best"

  - name: evaluate
    help: "Evaluate on the test data and save the metrics"
    script:
      - "python -m spacy evaluate ./training/model-best ./corpus/test.spacy --output ./metrics/${vars.config}.json --gpu-id ${vars.gpu}"
    deps:
      - "training/model-best"
      - "corpus/test.spacy"
    outputs:
      - "metrics/${vars.config}.json"

  - name: clean
    help: "Remove intermediate files"
    script:
      - "rm -rf training/*"
      - "rm -rf metrics/*"
      - "rm -rf corpus/*"
